FROM debian:bookworm-slim
#MAINTAINER "cytopia" <cytopia@everythingcli.org>


ENV PHP_VERSION=5.4.45
ENV PHP_INI_DIR=/usr/local/etc/php

# As this is the Jessie Version already, we can skip custom OpenSSL installation

# PHP 5.4 does not work with OpenSSL version from Debian Stretch (need to pick it from Jessie)
# https://github.com/devilbox/docker-php-fpm-5.3/issues/7
#
# https://manpages.debian.org/jessie/openssl/openssl.1ssl.en.html
# https://www.openssl.org/source/old/1.0.1/
#ENV OPENSSL_VERSION=1.0.1t

ENV NEEDED \
wget

ENV PHP_BUILD_DEPS \
	autoconf2.13 \
	libgmp-dev \
	libicu-dev \
	libicu \ 
	libjpeg62-turbo-dev \ 
	libpng-dev \ 
	libfreetype6-dev \
	libbison-dev \
	libcrypt1 \
	libcurl4-openssl-dev \
	libfl-dev \
	libmhash-dev \
	libmariadb-dev \
	libpcre3-dev \
	libreadline6-dev \
	librecode-dev \
	libsqlite3-dev \
# libssl-dev/oldoldstable 1.0.1t-1
	libssl-dev \
	libxml2-dev

ENV PHP_RUNTIME_DEPS \
	libmhash2 \
	libmysqlclient18 \
	libpcre3 \
	librecode0 \
	libsqlite3-0 \
# libssl1.0.0/oldoldstable,now 1.0.1t-1
	libssl1.0.0 \
	libxml2 \
	xz-utils

ENV BUILD_TOOLS \
	autoconf \
	bison \
	bisonc++ \
	ca-certificates \
	curl \
	dpkg-dev \
	file \
	flex \
	g++ \
	gcc \
	libc-dev \
	make \
	patch \
	pkg-config \
	re2c \
	xz-utils

ENV BUILD_TOOLS_32 \
	g++-multilib \
	gcc-multilib

ENV RUNTIME_TOOLS \
	ca-certificates \
	curl


###
### Fix expiring apt keys
###
RUN set -eux \
	&& echo 'Acquire::Check-Valid-Until no;' > /etc/apt/apt.conf.d/99no-check-valid-until \
	&& { \
		echo "deb http://deb.debian.org/debian bookworm main"; \
		#echo "deb [trusted=yes] http://security.debian.org/debian-security bookworm/updates main"; \
		echo "deb http://deb.debian.org/debian bookworm-updates main"; \
	} > /etc/apt/sources.list


# As this is the Jessie Version already, we can skip custom OpenSSL installation

###
### Build OpenSSL
###
#RUN set -eux \
## Install Dependencies
#	&& apt-get update \
#	&& apt-get install -y --no-install-recommends --no-install-suggests \
#		${BUILD_TOOLS} \
#	&& if [ "$(dpkg-architecture --query DEB_HOST_ARCH)" = "i386" ]; then \
#		apt-get install -y --no-install-recommends --no-install-suggests \
#			${BUILD_TOOLS_32}; \
#	fi \
## Fetch OpenSSL
#	&& cd /tmp \
#	&& mkdir openssl \
#	&& update-ca-certificates \
#	&& curl -sS -k -L --fail "https://www.openssl.org/source/openssl-$OPENSSL_VERSION.tar.gz" -o openssl.tar.gz \
#	&& curl -sS -k -L --fail "https://www.openssl.org/source/openssl-$OPENSSL_VERSION.tar.gz.asc" -o openssl.tar.gz.asc \
#	&& tar -xzf openssl.tar.gz -C openssl --strip-components=1 \
#	&& cd /tmp/openssl \
## Build OpenSSL
#	&& if [ "$(dpkg-architecture  --query DEB_HOST_ARCH)" = "i386" ]; then \
#		setarch i386 ./config -m32; \
#	else \
#		./config; \
#	fi \
#	&& make depend \
#	&& make -j"$(nproc)" \
#	&& make install \
## Cleanup
#	&& rm -rf /tmp/* \
## Ensure libs are linked to correct architecture directory
#	&& debMultiarch="$(dpkg-architecture --query DEB_BUILD_MULTIARCH)" \
#	&& mkdir -p "/usr/local/ssl/lib/${debMultiarch}" \
#	&& ln -s /usr/local/ssl/lib/* "/usr/local/ssl/lib/${debMultiarch}/" \
## Remove Dependencies
#	&& if [ "$(dpkg-architecture --query DEB_HOST_ARCH)" = "i386" ]; then \
#		apt-get purge -y --auto-remove -o APT::AutoRemove::RecommendsImportant=false -o APT::AutoRemove::SuggestsImportant=false \
#			${BUILD_TOOLS_32}; \
#	fi \
#	&& apt-get purge -y --auto-remove -o APT::AutoRemove::RecommendsImportant=false -o APT::AutoRemove::SuggestsImportant=false \
#		${BUILD_TOOLS} \
#	&& apt-get clean \
#	&& rm -rf /var/lib/apt/lists/*


###
### Setup PHP directories
###
RUN set -eux \
	&& mkdir -p ${PHP_INI_DIR}/conf.d \
	&& mkdir -p /usr/src/php


###
### Copy PHP, scripts and patches
###
COPY data/docker-php-source /usr/local/bin/
COPY data/php/php-${PHP_VERSION}.tar.xz /usr/src/php.tar.xz
# Fix config.guess for PHP itself (adds 'aarch64' [arm64] architecture)
# This file has been manually fixed
COPY data/php/config.guess.patched /usr/src/config.guess


##SOME FIXES
RUN apt-get update && apt-get install -y --no-install-recommends --no-install-suggests libgmp-dev wget gcc g++ make ca-certificates
RUN ln -s /usr/include/x86_64-linux-gnu/gmp.h /usr/include/gmp.h
RUN cd /usr/local/src && wget https://github.com/unicode-org/icu/archive/release-60-3.tar.gz && tar xvzf release-60-3.tar.gz
RUN cd /usr/local/src/icu-release-60-3/icu4c/source/ && ./runConfigureICU Linux --prefix=/usr/local/icu-60 && make -j4 && make install

###
### Build PHP
###
 RUN set -eux \
	&& apt-get update \
	&& apt-get install -y --no-install-recommends --no-install-suggests \
		${PHP_BUILD_DEPS} \
		${BUILD_TOOLS} \
	&& if [ "$(dpkg-architecture --query DEB_HOST_ARCH)" = "i386" ]; then \
		apt-get install -y --no-install-recommends --no-install-suggests \
			${BUILD_TOOLS_32}; \
	fi \
# Extract PHP
	&& tar -Jxf /usr/src/php.tar.xz -C "/usr/src/php" --strip-components=1 \
# Patch config.guess
	&& mv -f /usr/src/config.guess /usr/src/php/config.guess \
# Remove old tar.xz
	&& rm /usr/src/php.tar.xz \
# Create php.tar.xz
	&& cd /usr/src \
	&& tar -cJf php.tar.xz php \
# Setup Requirements
	&& docker-php-source extract \
	&& cd /usr/src/php  \
	\
	&& gnuArch="$(dpkg-architecture --query DEB_BUILD_GNU_TYPE)" \
	&& debMultiarch="$(dpkg-architecture --query DEB_BUILD_MULTIARCH)" \
	\
	# https://bugs.php.net/bug.php?id=74125
	&& if [ ! -d /usr/include/curl ]; then \
		ln -sT "/usr/include/${debMultiarch}/curl" /usr/local/include/curl; \
	fi \
# Build PHP
	&& ./configure \
		--with-libdir="/lib/${debMultiarch}/" \
		--with-config-file-path="${PHP_INI_DIR}" \
		--with-config-file-scan-dir="${PHP_INI_DIR}/conf.d" \
		--disable-cgi \
# --enable-ftp is included here because ftp_ssl_connect() needs ftp to be compiled statically (see https://github.com/docker-library/php/issues/236)
		--enable-ftp \
		--with-openssl-dir=/usr \
		\
# --enable-mbstring is included here because otherwise there's no way to get pecl to use it properly (see https://github.com/docker-library/php/issues/195)
		--enable-mbstring \
		\
# --enable-mysqlnd is included here because it's harder to compile after the fact than extensions are (since it's a plugin for several extensions, not an extension in itself)
		--enable-mysqlnd \
		\
		--enable-fpm \
		--with-fpm-user=www-data \
		--with-fpm-group=www-data \
# https://github.com/docker-library/php/issues/439
		--with-mhash \
		\
# always build against system sqlite3 (https://github.com/php/php-src/commit/6083a387a81dbbd66d6316a3a12a63f06d5f7109)
		--with-pdo-sqlite=/usr \
		--with-pdo-mysql=/usr \
		--with-sqlite3=/usr \
		--enable-calendar \
		--with-curl \
		--with-gd \
		--enable-gd-native-ttf \
		--with-gettext=shared \
		--with-jpeg-dir=/usr/lib/ \
		--with-png-dir=/usr/lib/ \
		--enable-exif \
		--with-gmp \
		--with-icu-dir=/usr/local/icu-60 \
		--enable-intl \
		--with-openssl \
		--with-imap-ssl \
		--enable-bcmath \ 
		--with-readline \
		--with-recode \
		--with-zlib \
		--with-pspell \
		--with-readline \
		--enable-pcntl \
	&& make -j"$(nproc)" \
	&& make install \
# Cleanup
	&& make clean \
	&& { find /usr/local/bin /usr/local/sbin -type f -executable -exec strip --strip-all '{}' + || true; } \
	&& docker-php-source delete \
# Remove Dependencies
	&& if [ "$(dpkg-architecture --query DEB_HOST_ARCH)" = "i386" ]; then \
		apt-get purge -y --auto-remove -o APT::AutoRemove::RecommendsImportant=false -o APT::AutoRemove::SuggestsImportant=false \
			${BUILD_TOOLS_32}; \
	fi \
	&& apt-get purge -y --auto-remove -o APT::AutoRemove::RecommendsImportant=false -o APT::AutoRemove::SuggestsImportant=false \
		${PHP_BUILD_DEPS} \
		${BUILD_TOOLS} \
# Install Run-time requirements
	&& apt-get update \
	&& apt-get install -y --no-install-recommends --no-install-suggests \
		${PHP_RUNTIME_DEPS} \
		${RUNTIME_TOOLS} \
	&& apt-get clean \
	&& rm -rf /var/lib/apt/lists/* \
# Setup extension dir
	&& mkdir -p "$(php -r 'echo ini_get("extension_dir");')"

# Fix config.guess for PHP modules (adds 'aarch64' [arm64] architecture)
# The config.guess has been copied from PHP 5.5
COPY data/php/usr-local-lib-php-build-config.guess /usr/local/lib/php/build/config.guess
COPY data/php/usr-local-lib-php-build-config.sub /usr/local/lib/php/build/config.sub

COPY data/docker-php-* /usr/local/bin/

WORKDIR /var/www/html
COPY data/php-fpm.conf /usr/local/etc/
COPY data/php.ini /usr/local/etc/php/php.ini

EXPOSE 9000
CMD ["php-fpm"]
